### 檔案名稱: client.js
-------------------------------------------------
// === client.js ===
const socket = io();
let myColor = null;
let currentTurn = null;

const boardEl = document.getElementById("board");
const statusEl = document.getElementById("status");
const messageEl = document.getElementById("message");

let opponentCursor = document.createElement('div');
opponentCursor.className = 'opponent-cursor';
document.body.appendChild(opponentCursor);

for (let i = 0; i < 64; i++) {
  const cell = document.createElement("div");
  cell.className = "cell";
  cell.dataset.index = i;

  cell.addEventListener('mouseenter', () => handleHover(cell));
  boardEl.appendChild(cell);
}

boardEl.addEventListener("click", e => {
  const idx = e.target.closest(".cell")?.dataset.index;
  if (!idx || currentTurn !== myColor) return;
  socket.emit("move", parseInt(idx));
});

function handleHover(cell) {
  clearHighlights();
  const idx = parseInt(cell.dataset.index);
  socket.emit('checkMove', idx);
  socket.emit('mouseMove', idx);
}

function clearHighlights() {
  document.querySelectorAll(".cell").forEach(cell => {
    cell.classList.remove('highlight', 'invalid');
  });
}

socket.on("highlightMove", ({ idx, isValid }) => {
  clearHighlights();
  const cell = document.querySelector(`.cell[data-index='${idx}']`);
  if (!cell) return;
  cell.classList.add(isValid ? 'highlight' : 'invalid');
});

socket.on("opponentMouse", idx => {
  const targetCell = document.querySelector(`.cell[data-index='${idx}']`);
  if (!targetCell) return;
  const rect = targetCell.getBoundingClientRect();
  opponentCursor.style.left = `${rect.left + rect.width / 2}px`;
  opponentCursor.style.top = `${rect.top + rect.height / 2}px`;
});


boardEl.addEventListener("click", e => {
  const idx = e.target.closest(".cell")?.dataset.index;
  if (!idx || currentTurn !== myColor) return;
  socket.emit("move", parseInt(idx));
});

boardEl.addEventListener("mousemove", e => {
  document.querySelectorAll(".cell").forEach(cell => cell.classList.remove("highlight", "invalid"));
  const idx = e.target.closest(".cell")?.dataset.index;
  if (idx && currentTurn === myColor) {
    socket.emit("checkMove", parseInt(idx));
  }
});

socket.on("waitingForOpponent", () => {
  statusEl.textContent = "等待對手加入...";
});

socket.on("playerColor", color => {
  myColor = color;
  document.getElementById("role").textContent = `您是：${color === "black" ? "⚫ 黑棋" : "⚪ 白棋"}`;
});

socket.on("startGame", data => {
  updateBoard(data.board);
  currentTurn = data.turn;
  updateStatus();
});

socket.on("updateBoard", data => {
  updateBoard(data.board);
  currentTurn = data.turn;
  updateStatus();
});

socket.on("invalidMove", () => {
  messageEl.textContent = "這不是合法的落子位置";
  messageEl.classList.add("show");
  setTimeout(() => messageEl.classList.remove("show"), 500);
});

socket.on("moveResult", ({ flippedCount, player }) => {
  const bonus = flippedCount >= 10 ? 5 : flippedCount >= 5 ? 2 : 1;
  if (player === myColor) {
    myScore += flippedCount + bonus;
  } else {
    opponentScore += flippedCount + bonus;
  }
  updateScore();
});

socket.on("highlightMove", ({ idx, isValid }) => {
  const cell = document.querySelector(`.cell[data-index='${idx}']`);
  if (cell) {
    cell.classList.add(isValid ? "highlight" : "invalid");
  }
});

socket.on("gameOver", ({ black, white, winner }) => {
  let msg = `遊戲結束！黑棋: ${black}, 白棋: ${white}。`;
  msg += winner === "draw" ? " 平手！" : winner === myColor ? " 你贏了！" : " 你輸了！";
  statusEl.textContent = msg;
});

socket.on("opponentLeft", () => {
  statusEl.textContent = "對手已離開房間，遊戲結束。";
});

function updateBoard(board) {
  let black = 0, white = 0;
  document.querySelectorAll(".cell").forEach((cell, i) => {
    const x = i % 8;
    const y = Math.floor(i / 8);
    const value = board[y][x];

    cell.innerHTML = "";

    if (value) {
      const disk = document.createElement("div");
      disk.className = `disk ${value}`;
      disk.style.transform = "scale(0)";
      setTimeout(() => disk.style.transform = "scale(1)", 10);
      cell.appendChild(disk);

      if (value === "black") black++;
      else white++;
    }
  });
  document.getElementById("blackCount").textContent = black;
  document.getElementById("whiteCount").textContent = white;
}

function updateStatus() {
  if (!myColor || !currentTurn) return;
  statusEl.textContent = myColor === currentTurn ? "輪到你下棋！" : "等待對手下棋...";
}

function updateScore() {
  scoreEl.textContent = `分數 - 你: ${myScore} | 對手: ${opponentScore}`;
}


### 檔案名稱: game.html
-------------------------------------------------
<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8" />
  <title>黑白棋</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <h1>黑白棋</h1>
  <div id="status">正在連線...</div>
  <div id="board"></div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="client.js"></script>
</body>
</html>


### 檔案名稱: index.html
-------------------------------------------------
<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8" />
  <title>雙人黑白棋</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <h1>雙人黑白棋</h1>
  <div id="status">正在連線...</div>

<div id="game-wrapper">
  <div id="board-frame">
    <div style="display: flex;">
      <div id="col-labels">
        <div>8</div><div>7</div><div>6</div><div>5</div><div>4</div><div>3</div><div>2</div><div>1</div>
      </div>
      <div>
        <div id="row-labels">
          <div>A</div><div>B</div><div>C</div><div>D</div><div>E</div><div>F</div><div>G</div><div>H</div>
        </div>
        <div id="board"></div>
      </div>
    </div>
  </div>
</div>


  <div id="counts">⚫ 黑棋: <span id="blackCount">2</span> ⚪ 白棋: <span id="whiteCount">2</span></div>
  <div id="role">您是：等待分配角色...</div>
  <div id="message"></div>
<div id="score">分數 - 你: 0 | 對手: 0</div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="client.js"></script>
</body>
</html>

### 檔案名稱: server.js
-------------------------------------------------
// === server.js ===
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

app.use(express.static(__dirname));

let rooms = {};

io.on('connection', socket => {
  let room = findAvailableRoom();

  if (!room) {
    const roomId = `room-${socket.id}`;
    rooms[roomId] = {
      players: [],
      board: createInitialBoard(),
      turn: 'black'
    };
    room = rooms[roomId];
  }

  room.players.push(socket);
  const roomId = getRoomId(socket);
  const color = room.players.length === 1 ? 'black' : 'white';

  socket.emit("playerColor", color);

  if (room.players.length === 2) {
    room.players.forEach(s => s.emit("startGame", {
      board: room.board,
      turn: room.turn
    }));
  } else {
    socket.emit("waitingForOpponent");
  }

  socket.on("move", idx => {
    if (room.turn !== color) return;

    const x = idx % 8;
    const y = Math.floor(idx / 8);

    const flipped = getFlippable(room.board, x, y, color);
    if (room.board[y][x] || flipped.length === 0) {
      socket.emit("invalidMove");
      return;
    }

    room.board[y][x] = color;
    flipped.forEach(([fx, fy]) => room.board[fy][fx] = color);
    room.turn = color === "black" ? "white" : "black";

    room.players.forEach(s => s.emit("updateBoard", {
      board: room.board,
      turn: room.turn
    }));

    room.players.forEach(s => s.emit("moveResult", {
      flippedCount: flipped.length,
      player: color
    }));

    if (checkGameOver(room.board)) {
      const flat = room.board.flat();
      const black = flat.filter(c => c === 'black').length;
      const white = flat.filter(c => c === 'white').length;
      const winner = black > white ? 'black' : white > black ? 'white' : 'draw';

      room.players.forEach(s => s.emit("gameOver", { black, white, winner }));
    }
  });

  socket.on("checkMove", idx => {
    const x = idx % 8;
    const y = Math.floor(idx / 8);
    const flipped = getFlippable(room.board, x, y, color);
    socket.emit("highlightMove", { idx, isValid: !room.board[y][x] && flipped.length > 0 });
  });

  socket.on("disconnect", () => {
    const id = getRoomId(socket);
    if (id) {
      rooms[id].players.forEach(p => {
        if (p !== socket) p.emit("opponentLeft");
      });
      delete rooms[id];
    }
  });
});

function createInitialBoard() {
  const board = Array(8).fill().map(() => Array(8).fill(null));
  board[3][3] = "white";
  board[3][4] = "black";
  board[4][3] = "black";
  board[4][4] = "white";
  return board;
}

function findAvailableRoom() {
  return Object.values(rooms).find(r => r.players.length === 1);
}

function getRoomId(socket) {
  return Object.entries(rooms).find(([_, r]) => r.players.includes(socket))?.[0];
}

function getFlippable(board, x, y, color) {
  const directions = [
    [0, 1], [1, 0], [0, -1], [-1, 0],
    [1, 1], [1, -1], [-1, 1], [-1, -1]
  ];
  const opponent = color === "black" ? "white" : "black";
  let flipped = [];

  for (let [dx, dy] of directions) {
    let nx = x + dx, ny = y + dy;
    let line = [];

    while (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
      if (board[ny][nx] === opponent) {
        line.push([nx, ny]);
      } else if (board[ny][nx] === color && line.length) {
        flipped = flipped.concat(line);
        break;
      } else {
        break;
      }
      nx += dx;
      ny += dy;
    }
  }
  return flipped;
}

function checkGameOver(board) {
  const colors = ["black", "white"];
  for (let color of colors) {
    for (let y = 0; y < 8; y++) {
      for (let x = 0; x < 8; x++) {
        if (!board[y][x] && getFlippable(board, x, y, color).length > 0) {
          return false;
        }
      }
    }
  }
  return true;
}

server.listen(3000, () => {
  console.log("伺服器啟動：http://localhost:3000");
});


### 檔案名稱: style.css
-------------------------------------------------
body {
  font-family: "Microsoft JhengHei", sans-serif;
  text-align: center;
  background-color: #ffeef4;
  margin: 0;
  padding: 20px;
}

h1 {
  color: #3567a3;
}

#status, #role, #score {
  font-size: 1.2em;
  margin-bottom: 10px;
}

#counts {
  font-size: 1.1em;
  margin-bottom: 10px;
}

#score {
  position: absolute;
  top: 10px;
  right: 20px;
  background: #fff;
  border: 1px solid #aaa;
  border-radius: 8px;
  padding: 5px 10px;
  font-weight: bold;
}

#message {
  color: red;
  height: 1.5em;
  margin-top: 10px;
  font-weight: bold;
  display: inline-block;
  transform: scale(1);
  opacity: 0;
  transition: transform 0.5s ease, opacity 0.5s ease;
  position: absolute;
  left: 50%;
  transform: translateX(-50%) scale(1);
}

#message.show {
  transform: translateX(-50%) scale(1.4);
  opacity: 1;
}

#game-wrapper {
  display: flex;
  justify-content: center;
  align-items: start;
  gap: 5px;
  margin: auto;
  width: fit-content;
}

#col-labels {
  display: grid;
  grid-template-rows: repeat(8, 1fr);
  height: 400px;
  font-weight: bold;
  color: #333;
  margin-right: 4px;
  align-items: center;
  padding-top: 34px; 
  padding-bottom: 4px;
}
#col-labels div {
  border: 1px solid #555;
  border-radius: 4px;
  padding: 2px 6px;
  background-color: #f0f0f0;
}

#row-labels {
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  width: 400px;
  text-align: center;
  font-weight: bold;
  color: #333;
  margin-top: 8px;
  margin-bottom: 4px;
}

#board-frame {
  border: 6px solid #333;
  padding: 10px;
  background-color: #999;
  border-radius: 12px;
  display: inline-block;
}
#row-labels div {
  background-color: #f0f0f0;
  padding: 2px 6px;
  border-radius: 4px;
  border: 1px solid #555;
}

#board {
  width: 400px;
  height: 400px;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(8, 1fr);
  gap: 2px;
  background-color: #444;
  border-radius: 6px;
  box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.4);
  position: relative;
}

.cell {
  background-color: #b4d9ee;
  width: 100%;
  height: 100%;
  position: relative;
  cursor: pointer;
  border-radius: 6px;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
  transition: transform 0.2s, background-color 0.2s;
}

.cell.highlight {
  transform: scale(1.2);
  background-color: #a0e0a0;
  transition: transform 0.4s, background-color 0.4s;
}

.cell.invalid {
  background-color: #e88;
}

.disk {
  width: 80%;
  height: 80%;
  border-radius: 50%;
  position: absolute;
  top: 10%;
  left: 10%;
  transition: transform 0.3s ease;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

.disk.black {
  background-color: black;
}

.disk.white {
  background-color: white;
  border: 1px solid #aaa;
}

.disk.flip {
  animation: flip 0.4s ease;
}

@keyframes flip {
  0% { transform: rotateY(0deg); }
  100% { transform: rotateY(180deg); }
}

.opponent-cursor {
  position: absolute;
  width: 16px;
  height: 16px;
  background-color: red;
  border-radius: 50%;
  pointer-events: none;
  transform: translate(-50%, -50%);
  z-index: 1000;
}


### 檔案名稱: tempCodeRunnerFile.js
-------------------------------------------------
updateBoard


如果是正確的話便得大一點持續時間再久一點然後當我移動到一些格子上的時候它上面判定移動到也就是滑鼠的判定要在加強然後我希望能夠看得到對手滑鼠的位置當我移動到一些格子上的時候它上面判定我移動到多個格子的上面也就是很多格子都變成紅色了也就是滑鼠的判定要在加強請把需要更動的檔案傳完整的城市給我